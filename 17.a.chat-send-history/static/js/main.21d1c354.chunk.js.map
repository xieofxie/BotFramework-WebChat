{"version":3,"sources":["SendHistory.js","WebChat.js","App.js","index.js"],"names":["SendHistory","persist","_state","_index","_storageKey","this","_persist","JSON","parse","window","sessionStorage","getItem","add","_persistAfter","truncate","length","item","idx","indexOf","splice","unshift","reset","pop","fn","args","call","setItem","stringify","props","state","directLine","fetchToken","fetch","method","res","json","token","setState","createDirectLine","className","React","Component","App","history","isDirty","store","createStore","next","action","type","payload","text","fromHistory","handleKeyDown","e","target","dataset","id","key","getNext","getPrevious","dispatch","onKeyDown","ReactDOM","render","document","getElementById"],"mappings":"gaAiFeA,E,WA1Eb,aAA6B,IAAjBC,IAAgB,yDAG1B,GAH0B,yBAJ5BC,OAAS,GAImB,KAH5BC,QAAU,EAGkB,KAF5BC,YAAc,uBAGZC,KAAKC,SAAWL,EAEZI,KAAKC,SAAU,CACjB,IACED,KAAKH,OAASK,KAAKC,MAAMC,OAAOC,eAAeC,QAAQN,KAAKD,eAAiB,GAC7E,SACAC,KAAKH,OAAS,GAGhBG,KAAKO,IAAMP,KAAKQ,cAAcR,KAAKO,KACnCP,KAAKS,SAAWT,KAAKQ,cAAcR,KAAKS,W,uDAM1C,OAAOT,KAAKH,OAAOa,OAAS,GAAKV,KAAKF,QAAU,I,0BAG9Ca,GACF,IAAMC,EAAMZ,KAAKH,OAAOgB,QAAQF,IAEnB,IAATC,GACFZ,KAAKH,OAAOiB,OAAOF,EAAK,GAG1BZ,KAAKH,OAAOkB,QAAQJ,GAEhBX,KAAKH,OAAOa,OApCC,IAqCfV,KAAKS,a,gCAKP,IAAME,EAAOX,KAAKH,OAAOG,KAAKF,OAAS,GAEvC,GAAIa,EAEF,OADAX,KAAKF,SACEa,I,oCAKT,IAAMA,EAAOX,KAAKH,OAAOG,KAAKF,OAAS,GAEvC,OAAIa,GACFX,KAAKF,SACEa,IAEPX,KAAKgB,QACE,M,8BAKThB,KAAKF,QAAU,I,iCAIfE,KAAKH,OAAOoB,Q,oCAGAC,GAAK,IAAD,OAChB,OAAO,WAAc,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAClBD,EAAGE,KAAH,MAAAF,EAAE,CAAM,GAAN,OAAeC,IAEb,EAAKlB,UACPG,OAAOC,eAAegB,QAAQ,EAAKtB,YAAaG,KAAKoB,UAAU,EAAKzB,c,oCCtE1E,WAAY0B,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,WAAY,MAJG,E,iFASjBzB,KAAK0B,e,yIAIaC,MAAM,6DAA8D,CAAEC,OAAQ,U,cAA1FC,E,0BACkBA,EAAIC,Q,gBAApBC,E,EAAAA,MAER/B,KAAKgC,UAAS,iBAAO,CACnBP,WAAYQ,2BAAiB,CAAEF,c,gFAKjC,OAAO/B,KAAKwB,MAAMC,WAChB,kBAAC,IAAD,eAAcS,UAAU,OAAOT,WAAYzB,KAAKwB,MAAMC,YAAgBzB,KAAKuB,QAE3E,4D,GA1BuBY,IAAMC,WCEdC,E,2MACnBC,QAAU,IAAI3C,E,EACd6B,MAAQ,CACNe,SAAS,G,EAGXC,MAAQC,sBAAY,IAAI,kBAAM,SAAAC,GAAI,OAAI,SAAAC,GAUpC,MAToB,0BAAhBA,EAAOC,KAET,EAAKN,QAAQ/B,IAAIoC,EAAOE,QAAQC,MACtBH,EAAOI,aAA+B,0BAAhBJ,EAAOC,OAEvC,EAAKZ,SAAS,CAAEO,QAAiC,KAAxBI,EAAOE,QAAQC,OACxC,EAAKR,QAAQtB,SAGR0B,EAAKC,Q,EAWdK,cAAgB,SAAAC,GAAM,IACZC,EAAWD,EAAXC,OAER,IAAK,EAAK1B,MAAMe,SAAiC,0BAAtBW,EAAOC,QAAQC,GAAgC,CACxE,IAAIN,EAEJ,OAAQG,EAAEI,KACR,IAAK,UACHP,EAAO,EAAKR,QAAQgB,UACpB,MACF,IAAK,YACHR,EAAO,EAAKR,QAAQiB,cACpB,MACF,QACE,OAGgB,kBAATT,GACT,EAAKN,MAAMgB,SAAS,CAClBZ,KAAM,wBACNG,aAAa,EACbF,QAAS,CAAEC,Y,wEA5BjB,OACE,yBAAKZ,UAAU,MAAMuB,UAAWzD,KAAKgD,eACnC,kBAAC,EAAD,CAAcR,MAAOxC,KAAKwC,a,GAtBDL,IAAMC,WCCvCsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.21d1c354.chunk.js","sourcesContent":["const HISTORY_SIZE = 25;\n\nclass SendHistory {\n  _state = [];\n  _index = -1;\n  _storageKey = 'WEBCHAT_SEND_HISTORY';\n\n  constructor(persist = true) {\n    this._persist = persist;\n\n    if (this._persist) {\n      try {\n        this._state = JSON.parse(window.sessionStorage.getItem(this._storageKey)) || [];\n      } catch {\n        this._state = [];\n      }\n\n      this.add = this._persistAfter(this.add);\n      this.truncate = this._persistAfter(this.truncate);\n    }\n  }\n\n  // better name?\n  isActive() {\n    return this._state.length > 0 && this._index > -1;\n  }\n\n  add(item) {\n    const idx = this._state.indexOf(item);\n\n    if (idx !== -1) {\n      this._state.splice(idx, 1);\n    }\n\n    this._state.unshift(item);\n\n    if (this._state.length > HISTORY_SIZE) {\n      this.truncate();\n    }\n  }\n\n  getNext() {\n    const item = this._state[this._index + 1];\n\n    if (item) {\n      this._index++;\n      return item;\n    }\n  }\n\n  getPrevious() {\n    const item = this._state[this._index - 1];\n\n    if (item) {\n      this._index--;\n      return item;\n    } else {\n      this.reset();\n      return '';\n    }\n  }\n\n  reset() {\n    this._index = -1;\n  }\n\n  truncate() {\n    this._state.pop();\n  }\n\n  _persistAfter(fn) {\n    return (...args) => {\n      fn.call(this, ...args);\n\n      if (this._persist) {\n        window.sessionStorage.setItem(this._storageKey, JSON.stringify(this._state));\n      }\n    };\n  }\n}\n\nexport default SendHistory;\n","import React from 'react';\n\nimport ReactWebChat, { createDirectLine } from 'botframework-webchat';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      directLine: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchToken();\n  }\n\n  async fetchToken() {\n    const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n    const { token } = await res.json();\n\n    this.setState(() => ({\n      directLine: createDirectLine({ token })\n    }));\n  }\n\n  render() {\n    return this.state.directLine ? (\n      <ReactWebChat className=\"chat\" directLine={this.state.directLine} {...this.props} />\n    ) : (\n      <div>Connecting to bot&hellip;</div>\n    );\n  }\n}\n","import React from 'react';\nimport { createStore } from 'botframework-webchat';\n\nimport SendHistory from './SendHistory';\nimport ReactWebChat from './WebChat';\n\nexport default class App extends React.Component {\n  history = new SendHistory();\n  state = {\n    isDirty: false\n  };\n\n  store = createStore({}, () => next => action => {\n    if (action.type === 'WEB_CHAT/SEND_MESSAGE') {\n      // add to history\n      this.history.add(action.payload.text);\n    } else if (!action.fromHistory && action.type === 'WEB_CHAT/SET_SEND_BOX') {\n      // sendbox was modified by the user, not history\n      this.setState({ isDirty: action.payload.text !== '' });\n      this.history.reset();\n    }\n\n    return next(action);\n  });\n\n  render() {\n    return (\n      <div className=\"app\" onKeyDown={this.handleKeyDown}>\n        <ReactWebChat store={this.store} />\n      </div>\n    );\n  }\n\n  handleKeyDown = e => {\n    const { target } = e;\n\n    if (!this.state.isDirty && target.dataset.id === 'webchat-sendbox-input') {\n      let text;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          text = this.history.getNext();\n          break;\n        case 'ArrowDown':\n          text = this.history.getPrevious();\n          break;\n        default:\n          return;\n      }\n\n      if (typeof text === 'string') {\n        this.store.dispatch({\n          type: 'WEB_CHAT/SET_SEND_BOX',\n          fromHistory: true,\n          payload: { text }\n        });\n      }\n    }\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}