{"version":3,"sources":["Timer.js","App.js","utils/useTimer.js","serviceWorker.js","index.js"],"names":["Timer","timeRemaining","ms","className","Math","floor","slice","TIME_INTERVAL","App","useState","createDirectLine","directLine","setDirectLine","store","setStore","initConversation","useCallback","createStore","dispatch","next","action","type","payload","name","value","language","window","navigator","setTimeRemaining","a","async","fetch","method","res","json","token","catch","error","console","log","useEffect","fn","step","timeout","setTimeout","clearTimeout","useTimer","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"obAEe,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,cACxBC,EAAKD,GAAiB,EAE5B,OACE,yBAAKE,UAAU,SAAf,kBACkB,IAChB,0BAAMA,UAAS,UAAKF,EAAgB,IAAQ,YAAc,KACvDG,KAAKC,MAAMH,EAAK,KADnB,KAC6B,IAAOE,KAAKC,MAAMH,EAAK,KAAQ,IAAKI,OAAO,KCF9E,IAAMC,EAAgB,IAmDPC,MAjDf,WAAgB,IAAD,EACuBC,mBAASC,2BAAiB,KADjD,mBACNC,EADM,KACMC,EADN,OAEaH,qBAFb,mBAENI,EAFM,KAECC,EAFD,KAIPC,EAAmBC,uBAAY,WACnCF,EACEG,sBAAY,IAAI,gBAAGC,EAAH,EAAGA,SAAH,OAAkB,SAAAC,GAAI,OAAI,SAAAC,GAcxC,MAboB,kCAAhBA,EAAOC,KACTH,EAAS,CACPG,KAAM,sBACNC,QAAS,CACPC,KAAM,eACNC,MAAO,CAAEC,SAAUC,OAAOC,UAAUF,aAGf,6BAAhBL,EAAOC,MAEhBO,EAAiBrB,GAGZY,EAAKC,SAIhB,WAAC,mBAAAS,EAAAC,OAAA,kEAAAD,EAAA,MAMmBE,MAAM,6DAA8D,CAAEC,OAAQ,UANjG,cAMOC,EANP,kBAAAJ,EAAA,MAOyBI,EAAIC,QAP7B,gBAOSC,EAPT,EAOSA,MAERvB,EAAcF,2BAAiB,CAAEyB,WATlC,qCAAD,GAUKC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC/B,CAACvB,EAAUF,IAEd4B,oBAAUzB,EAAkB,IArCf,MCPA,SAAkB0B,GAAkB,IAAdC,EAAa,uDAAN,IAAM,EACNjC,qBADM,mBACzCR,EADyC,KAC1B2B,EAD0B,KAehD,OAZAY,qBAAU,WACR,IAAIG,EAQJ,OAPI1C,EAAgB,EAClB0C,EAAUC,YAAW,kBAAMhB,GAAiB,SAAA1B,GAAE,OAAKA,EAAKwC,EAAOxC,EAAKwC,EAAO,OAAKA,GACrD,IAAlBzC,IACT2B,IACAa,KAGK,kBAAMI,aAAaF,MACzB,CAACF,EAAIxC,EAAe2B,EAAkBc,IAElC,CAACzC,EAAe2B,GD+BmBkB,CAAS/B,GAvCtC,mBAuCNd,EAvCM,KAuCS2B,EAvCT,KAyCb,OACE,yBAAKzB,UAAU,OACb,kBAACH,EAAD,CAAOC,cAAeA,IACtB,kBAAC,IAAD,CAAcE,UAAU,OAAOQ,WAAYA,EAAYE,MAAOA,MEzChDkC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.acfc55f4.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Timer({ timeRemaining }) {\n  const ms = timeRemaining || 0;\n\n  return (\n    <div className=\"timer\">\n      Time Remaining:{' '}\n      <span className={`${timeRemaining < 10000 ? 'timer-red' : ''}`}>\n        {Math.floor(ms / 60000)}:{('0' + (Math.floor(ms / 1000) % 60)).slice(-2)}\n      </span>\n    </div>\n  );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport ReactWebChat, { createDirectLine, createStore } from 'botframework-webchat';\n\nimport './App.css';\nimport Timer from './Timer';\nimport useTimer from './utils/useTimer';\n\nconst TIME_INTERVAL = 30000;\n\nfunction App() {\n  const [directLine, setDirectLine] = useState(createDirectLine({}));\n  const [store, setStore] = useState();\n\n  const initConversation = useCallback(() => {\n    setStore(\n      createStore({}, ({ dispatch }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: { language: window.navigator.language }\n            }\n          });\n        } else if (action.type === 'WEB_CHAT/SUBMIT_SEND_BOX') {\n          // Reset the timer when the user sends an activity\n          setTimeRemaining(TIME_INTERVAL);\n        }\n\n        return next(action);\n      })\n    );\n\n    (async function() {\n      // In this demo, we are using Direct Line token from MockBot.\n      // Your client code must provide either a secret or a token to talk to your bot.\n      // Tokens are more secure. To learn about the differences between secrets and tokens\n      // and to understand the risks associated with using secrets, visit\n      // https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-authentication?view=azure-bot-service-4.0\n      const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n      const { token } = await res.json();\n\n      setDirectLine(createDirectLine({ token }));\n    })().catch(error => console.log(error));\n  }, [setStore, setDirectLine]);\n\n  useEffect(initConversation, []);\n\n  const [timeRemaining, setTimeRemaining] = useTimer(initConversation);\n\n  return (\n    <div className=\"App\">\n      <Timer timeRemaining={timeRemaining} />\n      <ReactWebChat className=\"chat\" directLine={directLine} store={store} />\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport default function useTimer(fn, step = 1000) {\n  const [timeRemaining, setTimeRemaining] = useState();\n\n  useEffect(() => {\n    let timeout;\n    if (timeRemaining > 0) {\n      timeout = setTimeout(() => setTimeRemaining(ms => (ms > step ? ms - step : 0)), step);\n    } else if (timeRemaining === 0) {\n      setTimeRemaining();\n      fn();\n    }\n\n    return () => clearTimeout(timeout);\n  }, [fn, timeRemaining, setTimeRemaining, step]);\n\n  return [timeRemaining, setTimeRemaining];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}