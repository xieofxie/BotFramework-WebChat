{"version":3,"sources":["fetchSpeechServicesCredentials.js","CustomDictationInterims.js","MicrophoneIcon.js","CustomMicrophoneButton.js","LastBotActivity.js","App.js","serviceWorker.js","index.js"],"names":["fetchPromise","connectDictationInterims","Components","Constants","DictateState","DICTATING","STARTING","_ref","className","dictateInterims","dictateState","length","react_default","a","createElement","map","interim","index","key","MicrophoneIcon","_ref$size","size","height","viewBox","width","d","connectMicrophoneButton","click","dictating","disabled","classNames","onClick","RENEW_EVERY","lastFetch","region","_callee","regenerator_default","wrap","_context","prev","next","fetchCredentials","sent","abrupt","stop","token","_callee2","_ref2","_context2","_callee3","now","_context3","Date","fetch","method","then","res","json","catch","SpeakActivity","connectToWebChat","activity","activities","slice","reverse","find","role","from","type","_ref3","Fragment","text","channelData","speak","Composer","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","directLine","webSpeechPonyfillFactory","createCognitiveServicesSpeechServicesPonyfillFactory","fetchSpeechServicesToken","fetchSpeechServicesRegion","authorizationToken","setState","createDirectLine","_this$state","CustomMicrophoneButton","CustomDictationInterims","LastBotActivity","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QACIA,2HCGIC,EAA6BC,aAA7BD,2BAGJE,YADFC,aAAgBC,cAAWC,aAGdL,MACb,SAAAM,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,gBAAiBC,EAA/BH,EAA+BG,aAA/B,OACGA,IAAiBJ,GAAYI,IAAiBL,MAC7CI,EAAgBE,QAChBC,EAAAC,EAAAC,cAAA,KAAGN,UAAWA,GACXC,EAAgBM,IAAI,SAACC,EAASC,GAAV,OACnBL,EAAAC,EAAAC,cAAA,QAAMI,IAAKD,GAAQD,EAAnB,8BCbKG,EAAA,SAAAZ,GAAA,IAAGC,EAAHD,EAAGC,UAAHY,EAAAb,EAAcc,YAAd,IAAAD,EAAqB,GAArBA,EAAA,OACbR,EAAAC,EAAAC,cAAA,OAAKN,WAAYA,GAAa,IAAM,GAAIc,OAAQD,EAAME,QAAQ,YAAYC,MAAOH,GAC/ET,EAAAC,EAAAC,cAAA,QAAMW,EAAE,kbACRb,EAAAC,EAAAC,cAAA,QAAMW,EAAE,2PACRb,EAAAC,EAAAC,cAAA,QAAMW,EAAE,gRCEGC,KAFqBxB,aAA5BwB,0BAEOA,CAA0B,SAAAnB,GAAA,IAAGC,EAAHD,EAAGC,UAAWmB,EAAdpB,EAAcoB,MAAOC,EAArBrB,EAAqBqB,UAAWC,EAAhCtB,EAAgCsB,SAAhC,OACvCjB,EAAAC,EAAAC,cAAA,UAAQN,UAAWsB,IAAWtB,EAAW,CAAEoB,cAAcC,SAAUA,EAAUE,QAASJ,GACpFf,EAAAC,EAAAC,cAACK,EAAD,CAAgBE,KAAK,cHVnBW,EAAc,IAEhBC,EAAY,WAEDC,8EAAf,SAAAC,IAAA,IAAA5B,EAAA2B,EAAA,OAAAE,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC2BC,IAD3B,cAAAlC,EAAA+B,EAAAI,KACUR,EADV3B,EACU2B,OADVI,EAAAK,OAAA,SAGST,GAHT,wBAAAI,EAAAM,SAAAT,sCAMeU,8EAAf,SAAAC,IAAA,IAAAC,EAAAF,EAAA,OAAAT,EAAAvB,EAAAwB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,cAAAQ,EAAAR,KAAA,EAC0BC,IAD1B,cAAAM,EAAAC,EAAAN,KACUG,EADVE,EACUF,MADVG,EAAAL,OAAA,SAGSE,GAHT,wBAAAG,EAAAJ,SAAAE,sCAQeL,8EAAf,SAAAQ,IAAA,IAAAC,EAAA,OAAAd,EAAAvB,EAAAwB,KAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,cACQU,EAAME,KAAKF,QAEZlD,GAAgBkD,EAAMjB,EAAYD,KACrChC,EAAeqD,MAAM,iEAAkE,CAAEC,OAAQ,SAC9FC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBC,MAAM,WACLzB,EAAY,IAGhBA,EAAYiB,GAVhBC,EAAAR,OAAA,SAaS3C,GAbT,wBAAAmD,EAAAP,SAAAK,6BAgBeR,II9BPkB,EAAkBzD,aAAlByD,cAEOC,6BAAiB,SAAArD,GAAA,MAAqB,CACnDsD,SAD8BtD,EAAGuD,WAE9BC,QACAC,UACAC,KAAK,SAAAlB,GAAA,IAAWmB,EAAXnB,EAAGoB,KAAQD,KAAQE,EAAnBrB,EAAmBqB,KAAnB,MAAuC,QAATF,GAA2B,YAATE,MAJ3CR,CAMb,SAAAS,GAAA,IAAGR,EAAHQ,EAAGR,SAAH,QACIA,GACAjD,EAAAC,EAAAC,cAACF,EAAAC,EAAMyD,SAAP,KACE1D,EAAAC,EAAAC,cAAA,SAAI+C,EAASU,MACZV,EAASW,aAAeX,EAASW,YAAYC,OAAS7D,EAAAC,EAAAC,cAAC6C,EAAD,CAAeE,SAAUA,OCAhFa,EAAaxE,aAAbwE,SAEaC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,WAAY,KACZC,yBAA0B,MALXT,uNAUCxB,MAAM,6DAA8D,CAAEC,OAAQ,uBAA1FE,kBACkBA,EAAIC,8BAApBZ,eAC+B0C,4DACjBC,YACNC,qCADdC,wBACAxD,8CAFIoD,SAKNN,KAAKW,SAAS,iBAAO,CACnBN,WAAYO,2BAAiB,CAC3B/C,UAEFyC,kKAIK,IAAAO,EAGHb,KADFI,MAASC,EAFJQ,EAEIR,WAAYC,EAFhBO,EAEgBP,yBAGvB,QACID,KACAC,GACA1E,EAAAC,EAAAC,cAAC4D,EAAD,CAAUW,WAAYA,EAAYC,yBAA0BA,GAC1D1E,EAAAC,EAAAC,cAAA,OAAKN,UAAU,OACbI,EAAAC,EAAAC,cAAA,UAAQN,UAAU,cAChBI,EAAAC,EAAAC,cAACgF,EAAD,CAAwBtF,UAAU,sBAClCI,EAAAC,EAAAC,cAACiF,EAAD,CAAyBvF,UAAU,wBACnCI,EAAAC,EAAAC,cAACkF,EAAD,CAAiBxF,UAAU,+BAvCRyF,aCNbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO5F,EAAAC,EAAAC,cAAC2F,EAAD,MAASC,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.4850158d.chunk.js","sourcesContent":["const RENEW_EVERY = 300000;\nlet fetchPromise;\nlet lastFetch = 0;\n\nasync function region() {\n  const { region } = await fetchCredentials();\n\n  return region;\n}\n\nasync function token() {\n  const { token } = await fetchCredentials();\n\n  return token;\n}\n\n// This fetch function will be called every time Web Speech recognizer or synthesizer start\n// You are advised to cache the token to prevent unnecessary network call and delay\nasync function fetchCredentials() {\n  const now = Date.now();\n\n  if (!fetchPromise || now - lastFetch > RENEW_EVERY) {\n    fetchPromise = fetch('https://webchat-mockbot.azurewebsites.net/speechservices/token', { method: 'POST' })\n      .then(res => res.json())\n      .catch(() => {\n        lastFetch = 0;\n      });\n\n    lastFetch = now;\n  }\n\n  return fetchPromise;\n}\n\nexport default fetchCredentials;\nexport { region, token };\n","import React from 'react';\n\nimport { Components, Constants } from 'botframework-webchat';\n\nconst { connectDictationInterims } = Components;\nconst {\n  DictateState: { DICTATING, STARTING }\n} = Constants;\n\nexport default connectDictationInterims()(\n  ({ className, dictateInterims, dictateState }) =>\n    (dictateState === STARTING || dictateState === DICTATING) &&\n    !!dictateInterims.length && (\n      <p className={className}>\n        {dictateInterims.map((interim, index) => (\n          <span key={index}>{interim}&nbsp;</span>\n        ))}\n      </p>\n    )\n);\n","import React from 'react';\n\nexport default ({ className, size = 22 }) => (\n  <svg className={(className || '') + ''} height={size} viewBox=\"0 0 58 58\" width={size}>\n    <path d=\"M 44 28 C 43.448 28 43 28.447 43 29 L 43 35 C 43 42.72 36.72 49 29 49 C 21.28 49 15 42.72 15 35 L 15 29 C 15 28.447 14.552 28 14 28 C 13.448 28 13 28.447 13 29 L 13 35 C 13 43.485 19.644 50.429 28 50.949 L 28 56 L 23 56 C 22.448 56 22 56.447 22 57 C 22 57.553 22.448 58 23 58 L 35 58 C 35.552 58 36 57.553 36 57 C 36 56.447 35.552 56 35 56 L 30 56 L 30 50.949 C 38.356 50.429 45 43.484 45 35 L 45 29 C 45 28.447 44.552 28 44 28 Z\" />\n    <path d=\"M 28.97 44.438 L 28.97 44.438 C 23.773 44.438 19.521 40.033 19.521 34.649 L 19.521 11.156 C 19.521 5.772 23.773 1.368 28.97 1.368 L 28.97 1.368 C 34.166 1.368 38.418 5.772 38.418 11.156 L 38.418 34.649 C 38.418 40.033 34.166 44.438 28.97 44.438 Z\" />\n    <path d=\"M 29 46 C 35.065 46 40 41.065 40 35 L 40 11 C 40 4.935 35.065 0 29 0 C 22.935 0 18 4.935 18 11 L 18 35 C 18 41.065 22.935 46 29 46 Z M 20 11 C 20 6.037 24.038 2 29 2 C 33.962 2 38 6.037 38 11 L 38 35 C 38 39.963 33.962 44 29 44 C 24.038 44 20 39.963 20 35 L 20 11 Z\" />\n  </svg>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Components } from 'botframework-webchat';\n\nimport MicrophoneIcon from './MicrophoneIcon';\n\nconst { connectMicrophoneButton } = Components;\n\nexport default connectMicrophoneButton()(({ className, click, dictating, disabled }) => (\n  <button className={classNames(className, { dictating })} disabled={disabled} onClick={click}>\n    <MicrophoneIcon size=\"10vmin\" />\n  </button>\n));\n","import React from 'react';\n\nimport { connectToWebChat, Components } from 'botframework-webchat';\n\nconst { SpeakActivity } = Components;\n\nexport default connectToWebChat(({ activities }) => ({\n  activity: activities\n    .slice()\n    .reverse()\n    .find(({ from: { role }, type }) => role === 'bot' && type === 'message')\n}))(\n  ({ activity }) =>\n    !!activity && (\n      <React.Fragment>\n        <p>{activity.text}</p>\n        {activity.channelData && activity.channelData.speak && <SpeakActivity activity={activity} />}\n      </React.Fragment>\n    )\n);\n","import './App.css';\nimport {\n  Components,\n  createDirectLine,\n  createCognitiveServicesSpeechServicesPonyfillFactory\n} from 'botframework-webchat';\nimport React, { Component } from 'react';\n\nimport CustomDictationInterims from './CustomDictationInterims';\nimport CustomMicrophoneButton from './CustomMicrophoneButton';\nimport {\n  region as fetchSpeechServicesRegion,\n  token as fetchSpeechServicesToken\n} from './fetchSpeechServicesCredentials';\nimport LastBotActivity from './LastBotActivity';\n\nconst { Composer } = Components;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      directLine: null,\n      webSpeechPonyfillFactory: null\n    };\n  }\n\n  async componentDidMount() {\n    const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n    const { token } = await res.json();\n    const webSpeechPonyfillFactory = await createCognitiveServicesSpeechServicesPonyfillFactory({\n      authorizationToken: fetchSpeechServicesToken,\n      region: await fetchSpeechServicesRegion()\n    });\n\n    this.setState(() => ({\n      directLine: createDirectLine({\n        token\n      }),\n      webSpeechPonyfillFactory\n    }));\n  }\n\n  render() {\n    const {\n      state: { directLine, webSpeechPonyfillFactory }\n    } = this;\n\n    return (\n      !!directLine &&\n      !!webSpeechPonyfillFactory && (\n        <Composer directLine={directLine} webSpeechPonyfillFactory={webSpeechPonyfillFactory}>\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <CustomMicrophoneButton className=\"App-speech-button\" />\n              <CustomDictationInterims className=\"App-speech-interims\" />\n              <LastBotActivity className=\"App-bot-activity\" />\n            </header>\n          </div>\n        </Composer>\n      )\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}