{"version":3,"sources":["WebChat.js","Inspector.js","App.js","index.js"],"names":["props","state","directLine","this","fetchToken","fetch","method","res","json","token","setState","createDirectLine","className","React","Component","NothingSelected","Fragment","Inspector","inspectedObject","inspectorRef","tabIndex","ref","JSON","stringify","App","activityMiddleware","next","card","children","isSelected","activity","selectedActivity","selectedClass","label","aria-label","onClick","selectActivity","onKeyDown","handleKeyDown","role","prevState","current","focus","e","includes","key","createRef","ReactDOM","render","document","getElementById"],"mappings":"saAKE,WAAYA,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,WAAY,MAJG,E,iFASjBC,KAAKC,e,yIAIaC,MAAM,6DAA8D,CAAEC,OAAQ,U,cAA1FC,E,0BACkBA,EAAIC,Q,gBAApBC,E,EAAAA,MAERN,KAAKO,UAAS,iBAAO,CACnBR,WAAYS,2BAAiB,CAAEF,c,gFAKjC,OAAON,KAAKF,MAAMC,WAChB,kBAAC,IAAD,eAAcU,UAAU,OAAOV,WAAYC,KAAKF,MAAMC,YAAgBC,KAAKH,QAE3E,4D,GA1BuBa,IAAMC,WCFnC,SAASC,IACP,OACE,kBAAC,IAAMC,SAAP,KACE,gDACA,iG,IAKeC,E,iLACT,IAAD,EACmCd,KAAKH,MAAvCkB,EADD,EACCA,gBAAiBC,EADlB,EACkBA,aAEzB,OACE,yBAAKP,UAAU,YAAYQ,SAAS,KAAKC,IAAKF,GAC5C,yCACA,6BAAMD,EAAkB,6BAAMI,KAAKC,UAAUL,EAAiB,KAAM,IAAY,kBAACH,EAAD,Y,GAPjDD,aCNlBU,E,YACnB,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRyB,mBAAqB,kBAAM,SAAAC,GAAI,OAAI,SAAAC,GAAI,OAAI,SAAAC,GACzC,IAAMC,EAAaF,EAAKG,WAAa,EAAK7B,MAAM8B,iBAC1CC,EAAgBH,EAAa,WAAa,GAC1CI,EAAQJ,EAAa,iDAAmD,6BAE9E,OACE,yBACEK,aAAYD,EACZrB,UAAS,2BAAsBoB,GAC/BG,QAAS,EAAKC,eAAeT,EAAKG,UAClCO,UAAW,EAAKC,cAAcX,EAAKG,UACnCS,KAAK,SACLnB,SAAS,KAERM,EAAKC,EAALD,CAAWE,QAlCC,EAuCnBQ,eAAiB,SAAAL,GAAgB,OAAI,WACnC,EAAKrB,UACH,SAAA8B,GAAS,MAAK,CACZT,iBAAkBS,EAAUT,mBAAqBA,EAAmB,KAAOA,MAE7E,WACM,EAAK9B,MAAM8B,kBACb,EAAKZ,aAAasB,QAAQC,aA9Cf,EAoDnBJ,cAAgB,SAAAF,GAAc,OAAI,SAAAO,GAC5B,CAAC,IAAK,SAASC,SAASD,EAAEE,MAC5B,EAAKT,eAAeA,EAApB,CAAoCO,KAnDtC,EAAK1C,MAAQ,CACX8B,iBAAkB,MAEpB,EAAKZ,aAAeN,IAAMiC,YANT,E,sEAST,IACAf,EAAqB5B,KAAKF,MAA1B8B,iBAER,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAca,mBAAoBtB,KAAKsB,qBACvC,kBAAC,EAAD,CAAWP,gBAAiBa,EAAkBZ,aAAchB,KAAKgB,oB,GAhBxCN,IAAMC,WCEvCiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7115785d.chunk.js","sourcesContent":["import React from 'react';\n\nimport ReactWebChat, { createDirectLine } from 'botframework-webchat';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      directLine: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchToken();\n  }\n\n  async fetchToken() {\n    const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n    const { token } = await res.json();\n\n    this.setState(() => ({\n      directLine: createDirectLine({ token })\n    }));\n  }\n\n  render() {\n    return this.state.directLine ? (\n      <ReactWebChat className=\"chat\" directLine={this.state.directLine} {...this.props} />\n    ) : (\n      <div>Connecting to bot&hellip;</div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nfunction NothingSelected() {\n  return (\n    <React.Fragment>\n      <h4>Nothing selected</h4>\n      <p>Click on any message sent from the user or the bot to inspect it.</p>\n    </React.Fragment>\n  );\n}\n\nexport default class Inspector extends Component {\n  render() {\n    const { inspectedObject, inspectorRef } = this.props;\n\n    return (\n      <div className=\"inspector\" tabIndex=\"-1\" ref={inspectorRef}>\n        <h2>Inspector</h2>\n        <div>{inspectedObject ? <pre>{JSON.stringify(inspectedObject, null, 4)}</pre> : <NothingSelected />}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport ReactWebChat from './WebChat';\nimport Inspector from './Inspector';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedActivity: null\n    };\n    this.inspectorRef = React.createRef();\n  }\n\n  render() {\n    const { selectedActivity } = this.state;\n\n    return (\n      <div className=\"app\">\n        <ReactWebChat activityMiddleware={this.activityMiddleware} />\n        <Inspector inspectedObject={selectedActivity} inspectorRef={this.inspectorRef} />\n      </div>\n    );\n  }\n\n  activityMiddleware = () => next => card => children => {\n    const isSelected = card.activity === this.state.selectedActivity;\n    const selectedClass = isSelected ? 'selected' : '';\n    const label = isSelected ? 'Selected activity. Click to deselect activity.' : 'Click to inspect activity.';\n\n    return (\n      <div\n        aria-label={label}\n        className={`activity-wrapper ${selectedClass}`}\n        onClick={this.selectActivity(card.activity)}\n        onKeyDown={this.handleKeyDown(card.activity)}\n        role=\"button\"\n        tabIndex=\"0\"\n      >\n        {next(card)(children)}\n      </div>\n    );\n  };\n\n  selectActivity = selectedActivity => () => {\n    this.setState(\n      prevState => ({\n        selectedActivity: prevState.selectedActivity === selectedActivity ? null : selectedActivity\n      }),\n      () => {\n        if (this.state.selectedActivity) {\n          this.inspectorRef.current.focus();\n        }\n      }\n    );\n  };\n\n  handleKeyDown = selectActivity => e => {\n    if ([' ', 'Enter'].includes(e.key)) {\n      this.selectActivity(selectActivity)(e);\n    }\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}