{"version":3,"sources":["serviceWorker.js","fetchSpeechServicesCredentials.js","BlurLens.js","hooks/useLastBotActivity.js","BotResponse.js","Notification.js","Clock.js","MicrophoneButton.js","SpeechInterims.js","SmartDisplay.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","fetchPromise","RENEW_EVERY","lastFetch","fetchCredentials","a","async","now","Date","fetch","method","then","res","json","region","authorizationToken","token","catch","useSendBoxSpeechInterimsVisible","hooks","BlurLens","interimsVisible","className","classNames","hide","useActivities","useLastBotActivity","slice","reverse","find","role","from","type","SpeakActivity","Components","BotResponse","lastReadActivityID","lastBotActivity","renderAttachment","useMemo","createAdaptiveCardsAttachmentMiddleware","id","text","showScrollBar","attachments","map","attachment","index","key","activity","channelData","speak","Notification","children","icon","Clock","useState","clock","setClock","temperatureInFahrenheit","setTemperatureInFahrenheit","useEffect","headers","accept","ok","properties","periods","firstPeriod","temperature","fn","intervalMS","interval","setInterval","clearInterval","useInterval","Intl","DateTimeFormat","hour12","timeStyle","format","useMicrophoneButtonClick","useMicrophoneButtonDisabled","CustomMicrophoneButton","onClick","disabled","click","handleClick","useCallback","dictating","useDictateInterims","CustomDictationInterims","dictateInterims","speechInterimsVisible","interim","SmartDisplay","setLastReadActivityID","handleMicrophoneButtonClick","Composer","App","directLineSpeechAdapters","setDirectLineSpeechAdapters","createDirectLineSpeechAdapters","fetchCognitiveServicesCredentials","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"weAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,IChB/BC,E,iDADEC,EAAc,IAEhBC,EAAY,EAgBhB,SAAeC,IAAf,eAAAC,EAAAC,OAAA,uDACQC,EAAMC,KAAKD,QAEZN,GAAgBM,EAAMJ,EAAYD,KACrCD,EAAeQ,MAAM,2EAA4E,CAAEC,OAAQ,SACxGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,gBAAGG,EAAH,EAAGA,OAAH,MAAwB,CAAEC,mBAA1B,EAAWC,MAA0CF,aAC1DG,OAAM,WACLd,EAAY,KAGhBA,EAAYI,GAXhB,kBAcSN,GAdT,qCAiBeG,Q,2BC7BPc,EAAoCC,QAApCD,gCAQOE,EANE,WAAO,IAAD,EACKF,IAAnBG,EADc,oBAGrB,OAAO,yBAAKC,UAAWC,IAAW,eAAgB,CAAEC,MAAOH,O,4BCTrDI,EAAkBN,QAAlBM,cAEO,SAASC,IAAsB,IAAD,EACtBD,IAErB,MAAO,CAHoC,oBAKtCE,QACAC,UACAC,MAAK,gBAAWC,EAAX,EAAGC,KAAQD,KAAQE,EAAnB,EAAmBA,KAAnB,MAAuC,QAATF,GAA2B,YAATE,M,ICHpDC,EAAkBC,aAAlBD,cACAf,EAAoCC,QAApCD,gCA+BOiB,EA7BK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBAAyB,EACpBlB,IAAnBG,EADuC,sBAEpBK,IAAnBW,EAFuC,oBAIxCC,EAAmBC,mBAAQ,WAC/B,OAAOC,uDAA4C,kBAAM,OACxD,IAEH,OACGnB,KACCgB,GACFA,EAAgBI,KAAOL,GACrB,yBAAKd,UAAU,qBACVe,EAAgBK,MAAQ,yBAAKpB,UAAU,4BAA4Be,EAAgBK,MACtF,kBAAC,IAAD,CAAMpB,UAAU,8BAA8BqB,eAAe,IACzDN,EAAgBO,aAAe,IAAIC,KAAI,SAACC,EAAYC,GAAb,OACvC,yBAAKzB,UAAU,6BAA6B0B,IAAKD,GAC9CT,EAAiB,CAAEW,SAAUZ,EAAiBS,oBAIpDT,EAAgBa,aAAeb,EAAgBa,YAAYC,OAC1D,kBAAClB,EAAD,CAAegB,SAAUZ,MCnBpBe,G,gBATM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAChC,OACE,yBAAKhC,UAAU,oBACb,uBAAGA,UAAWC,IAAW,wBAAyB,UAA1B,mBAAiD+B,MACzE,yBAAKhC,UAAU,yBAAyB+B,MCS9C,IAoCeE,EApCD,WAAO,IAAD,EACQC,mBAAShD,KAAKD,OADtB,mBACXkD,EADW,KACJC,EADI,OAE4CF,qBAF5C,mBAEXG,EAFW,KAEcC,EAFd,KAwBlB,OApBAC,qBAAU,YACR,WAAC,cAAAxD,EAAAC,OAAA,kEAAAD,EAAA,MACmBI,MAlBK,yDAkBuB,CAC5CqD,QAAS,CAAEC,OAAQ,2BAFtB,YACOnD,EADP,QAKSoD,GALT,mCAAA3D,EAAA,MAUaO,EAAIC,QAVjB,gCAOKoD,WACEC,QARP,GAQiBC,EARjB,KAYGP,EAA2BO,EAAYC,aAZ1C,sCAAD,KAeC,IA9BL,SAAqBC,GAAwB,IAApBC,EAAmB,uDAAN,IACpCT,qBAAU,WACR,GAAIQ,GAAMC,EAAY,CACpB,IAAMC,EAAWC,YAAYH,EAAIC,GAEjC,OAAO,kBAAMG,cAAcF,OAE5B,CAACF,EAAIC,IAyBRI,EAAY,kBAAMhB,EAASlD,KAAKD,SAAQ,KAGtC,yBAAKe,UAAU,aACb,yBAAKA,UAAU,kBACZqD,KAAKC,eAAe,QAAS,CAAEC,QAAQ,EAAOC,UAAW,UAAWC,OAAO,IAAIvE,KAAKiD,OAEpFE,GAA2B,kBAAC,EAAD,CAAcL,KAAK,mBAAmBK,EAAtC,SAC9B,kBAAC,EAAD,CAAcL,KAAK,QAAnB,KACA,kBAAC,EAAD,CAAcA,KAAK,wBAAnB,OC3CE0B,G,QAA2F7D,QAA3F6D,0BAA0BC,EAAiE9D,QAAjE8D,4BAA6B/D,EAAoCC,QAApCD,gCAuBhDgE,EArBgB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACpBjE,IAAnBG,EADuC,sBAE3B4D,IAAZG,EAFuC,oBAGxCC,EAAQL,IAERM,EAAcC,uBAAY,WAC9BF,IACAF,GAAWA,MACV,CAACE,EAAOF,IAEX,OACE,4BACE7D,UAAWC,IAAW,uBAAwB,CAAEiE,UAAWnE,IAC3D+D,SAAUA,EACVD,QAASG,GAET,uBAAGhE,UAAU,kCCnBXmE,G,QAAwDtE,QAAxDsE,oBAAoBvE,EAAoCC,QAApCD,gCAebwE,EAbiB,WAAO,IAAD,EACVD,IAAnBE,EAD6B,sBAEJzE,IAAzB0E,EAF6B,oBAIpC,OACEA,GACE,yBAAKtE,UAAU,wBACVsE,GAAyBD,EAAgB9C,KAAI,SAACgD,EAAS9C,GAAV,OAAoB,0BAAMC,IAAKD,GAAQ8C,EAAnB,aCe7DC,EAnBM,WAAO,IAAD,EACCpE,IAAnBW,EADkB,sBAE2BmB,qBAF3B,mBAElBpB,EAFkB,KAEE2D,EAFF,KAInBC,EAA8BT,uBAAY,WAC9ClD,GAAmB0D,EAAsB1D,EAAgBI,MACxD,CAACJ,EAAiB0D,IAErB,OACE,yBAAKzE,UAAU,oBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAac,mBAAoBA,IACjC,kBAAC,EAAD,CAAkB+C,QAASa,MCjBzBC,EAAa/D,aAAb+D,SAuBOC,EArBH,WAAO,IAAD,EACgD1C,qBADhD,mBACT2C,EADS,KACiBC,EADjB,KAYhB,OATAvC,qBAAU,WACP,EAAAxD,EAAAC,OAAA,4DACC8F,EADD,WAAA/F,EAAA,MAESgG,yCAA+B,CACnCjG,iBAAkBkG,KAHvB,mGAMA,CAACF,MAGAD,GACA,kBAACF,EAAaE,EACZ,kBAAC,EAAD,Q,gBCjBRI,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SX+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlG,MAAK,SAAAmG,GACjCA,EAAaC,iB","file":"static/js/main.daab2c10.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const RENEW_EVERY = 300000;\nlet fetchPromise;\nlet lastFetch = 0;\n\nasync function region() {\n  const { region } = await fetchCredentials();\n\n  return region;\n}\n\nasync function token() {\n  const { token } = await fetchCredentials();\n\n  return token;\n}\n\n// This fetch function will be called every time Web Speech recognizer or synthesizer start\n// You are advised to cache the token to prevent unnecessary network call and delay\nasync function fetchCredentials() {\n  const now = Date.now();\n\n  if (!fetchPromise || now - lastFetch > RENEW_EVERY) {\n    fetchPromise = fetch('https://webchat-mockbot-streaming.azurewebsites.net/speechservices/token', { method: 'POST' })\n      .then(res => res.json())\n      .then(({ region, token }) => ({ authorizationToken: token, region }))\n      .catch(() => {\n        lastFetch = 0;\n      });\n\n    lastFetch = now;\n  }\n\n  return fetchPromise;\n}\n\nexport default fetchCredentials;\nexport { region, token };\n","import './BlurLens.css';\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport { hooks } from 'botframework-webchat';\n\nconst { useSendBoxSpeechInterimsVisible } = hooks;\n\nconst BlurLens = () => {\n  const [interimsVisible] = useSendBoxSpeechInterimsVisible();\n\n  return <div className={classNames('App-BlurLens', { hide: !interimsVisible })} />;\n};\n\nexport default BlurLens;\n","import { hooks } from 'botframework-webchat';\n\nconst { useActivities } = hooks;\n\nexport default function useLastBotActivity() {\n  const [activities] = useActivities();\n\n  return [\n    activities\n      .slice()\n      .reverse()\n      .find(({ from: { role }, type }) => role === 'bot' && type === 'message')\n  ];\n}\n","import './BotResponse.css';\n\nimport { Components, createAdaptiveCardsAttachmentMiddleware, hooks } from 'botframework-webchat';\nimport Film from 'react-film';\nimport React, { useMemo } from 'react';\n\nimport useLastBotActivity from './hooks/useLastBotActivity';\n\nconst { SpeakActivity } = Components;\nconst { useSendBoxSpeechInterimsVisible } = hooks;\n\nconst BotResponse = ({ lastReadActivityID }) => {\n  const [interimsVisible] = useSendBoxSpeechInterimsVisible();\n  const [lastBotActivity] = useLastBotActivity();\n\n  const renderAttachment = useMemo(() => {\n    return createAdaptiveCardsAttachmentMiddleware()()(() => false);\n  }, []);\n\n  return (\n    !interimsVisible &&\n    !!lastBotActivity &&\n    lastBotActivity.id !== lastReadActivityID && (\n      <div className=\"App-BotResponse\">\n        {!!lastBotActivity.text && <div className=\"App-BotResponse-Activity\">{lastBotActivity.text}</div>}\n        <Film className=\"App-BotResponse-Attachments\" showScrollBar={false}>\n          {(lastBotActivity.attachments || []).map((attachment, index) => (\n            <div className=\"App-BotResponse-Attachment\" key={index}>\n              {renderAttachment({ activity: lastBotActivity, attachment })}\n            </div>\n          ))}\n        </Film>\n        {lastBotActivity.channelData && lastBotActivity.channelData.speak && (\n          <SpeakActivity activity={lastBotActivity} />\n        )}\n      </div>\n    )\n  );\n};\n\nexport default BotResponse;\n","import './Notification.css';\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nconst Notification = ({ children, icon }) => {\n  return (\n    <div className=\"App-Notification\">\n      <i className={classNames('App-Notification-Icon', 'ms-Icon', `ms-Icon--${icon}`)} />\n      <div className=\"App-Notification-Text\">{children}</div>\n    </div>\n  );\n};\n\nexport default Notification;\n","import './Clock.css';\n\nimport React, { useEffect, useState } from 'react';\n\nimport Notification from './Notification';\n\nconst WEATHER_FORECAST_URL = 'https://api.weather.gov/gridpoints/SEW/130,67/forecast';\n\nfunction useInterval(fn, intervalMS = 1000) {\n  useEffect(() => {\n    if (fn && intervalMS) {\n      const interval = setInterval(fn, intervalMS);\n\n      return () => clearInterval(interval);\n    }\n  }, [fn, intervalMS]);\n}\n\nconst Clock = () => {\n  const [clock, setClock] = useState(Date.now());\n  const [temperatureInFahrenheit, setTemperatureInFahrenheit] = useState();\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(WEATHER_FORECAST_URL, {\n        headers: { accept: 'application/geo+json' }\n      });\n\n      if (res.ok) {\n        const {\n          properties: {\n            periods: [firstPeriod]\n          }\n        } = await res.json();\n\n        setTemperatureInFahrenheit(firstPeriod.temperature);\n      }\n    })();\n  }, []);\n\n  useInterval(() => setClock(Date.now()), 1000);\n\n  return (\n    <div className=\"App-Clock\">\n      <div className=\"App-Clock-Text\">\n        {Intl.DateTimeFormat('en-US', { hour12: false, timeStyle: 'short' }).format(new Date(clock))}\n      </div>\n      {!!temperatureInFahrenheit && <Notification icon=\"PartlyCloudyDay\">{temperatureInFahrenheit}&deg;F</Notification>}\n      <Notification icon=\"Mail\">2</Notification>\n      <Notification icon=\"SkypeForBusinessLogo\">1</Notification>\n    </div>\n  );\n};\n\nexport default Clock;\n","import './MicrophoneButton.css';\n\nimport { hooks } from 'botframework-webchat';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nconst { useMicrophoneButtonClick, useMicrophoneButtonDisabled, useSendBoxSpeechInterimsVisible } = hooks;\n\nconst CustomMicrophoneButton = ({ onClick }) => {\n  const [interimsVisible] = useSendBoxSpeechInterimsVisible();\n  const [disabled] = useMicrophoneButtonDisabled();\n  const click = useMicrophoneButtonClick();\n\n  const handleClick = useCallback(() => {\n    click();\n    onClick && onClick();\n  }, [click, onClick]);\n\n  return (\n    <button\n      className={classNames('App-MicrophoneButton', { dictating: interimsVisible })}\n      disabled={disabled}\n      onClick={handleClick}\n    >\n      <i className=\"ms-Icon ms-Icon--Microphone\" />\n    </button>\n  );\n};\n\nexport default CustomMicrophoneButton;\n","import './SpeechInterims.css';\n\nimport { hooks } from 'botframework-webchat';\nimport React from 'react';\n\nconst { useDictateInterims, useSendBoxSpeechInterimsVisible } = hooks;\n\nconst CustomDictationInterims = () => {\n  const [dictateInterims] = useDictateInterims();\n  const [speechInterimsVisible] = useSendBoxSpeechInterimsVisible();\n\n  return (\n    speechInterimsVisible && (\n      <div className=\"App-SpeechInterims\">\n        {!!speechInterimsVisible && dictateInterims.map((interim, index) => <span key={index}>{interim}&nbsp;</span>)}\n      </div>\n    )\n  );\n};\n\nexport default CustomDictationInterims;\n","import React, { useCallback, useState } from 'react';\n\nimport BlurLens from './BlurLens';\nimport BotResponse from './BotResponse';\nimport Clock from './Clock';\nimport MicrophoneButton from './MicrophoneButton';\nimport SpeechInterims from './SpeechInterims';\n\nimport useLastBotActivity from './hooks/useLastBotActivity';\n\nconst SmartDisplay = () => {\n  const [lastBotActivity] = useLastBotActivity();\n  const [lastReadActivityID, setLastReadActivityID] = useState();\n\n  const handleMicrophoneButtonClick = useCallback(() => {\n    lastBotActivity && setLastReadActivityID(lastBotActivity.id);\n  }, [lastBotActivity, setLastReadActivityID]);\n\n  return (\n    <div className=\"App-SmartDisplay\">\n      <Clock />\n      <BlurLens />\n      <SpeechInterims />\n      <BotResponse lastReadActivityID={lastReadActivityID} />\n      <MicrophoneButton onClick={handleMicrophoneButtonClick} />\n    </div>\n  );\n};\n\nexport default SmartDisplay;\n","import { Components, createDirectLineSpeechAdapters } from 'botframework-webchat';\n\nimport React, { useEffect, useState } from 'react';\n\nimport fetchCognitiveServicesCredentials from './fetchSpeechServicesCredentials';\nimport SmartDisplay from './SmartDisplay';\n\nconst { Composer } = Components;\n\nconst App = () => {\n  const [directLineSpeechAdapters, setDirectLineSpeechAdapters] = useState();\n\n  useEffect(() => {\n    (async () =>\n      setDirectLineSpeechAdapters(\n        await createDirectLineSpeechAdapters({\n          fetchCredentials: fetchCognitiveServicesCredentials\n        })\n      ))();\n  }, [setDirectLineSpeechAdapters]);\n\n  return (\n    !!directLineSpeechAdapters && (\n      <Composer {...directLineSpeechAdapters}>\n        <SmartDisplay />\n      </Composer>\n    )\n  );\n};\n\nexport default App;\n","import './fabric-icons-inline.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}